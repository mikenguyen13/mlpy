Traceback (most recent call last):
  File "C:\ProgramData\anaconda3\envs\mlpy\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\ProgramData\anaconda3\envs\mlpy\lib\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\ProgramData\anaconda3\envs\mlpy\lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "C:\ProgramData\anaconda3\envs\mlpy\lib\asyncio\base_events.py", line 649, in run_until_complete
    return future.result()
  File "C:\ProgramData\anaconda3\envs\mlpy\lib\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "C:\ProgramData\anaconda3\envs\mlpy\lib\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\ProgramData\anaconda3\envs\mlpy\lib\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Advanced Mixture-of-Agents example â€“ 3 layers
import asyncio
import os
import together
from together import AsyncTogether, Together

client = Together()
async_client = AsyncTogether()

user_prompt = "What are 3 fun things to do in SF?"
reference_models = [
    "Qwen/Qwen2-72B-Instruct",
    "Qwen/Qwen1.5-72B-Chat",
    "mistralai/Mixtral-8x22B-Instruct-v0.1",
    "databricks/dbrx-instruct",
]
aggregator_model = "mistralai/Mixtral-8x22B-Instruct-v0.1"
aggreagator_system_prompt = """You have been provided with a set of responses from various open-source models to the latest user query. Your task is to synthesize these responses into a single, high-quality response. It is crucial to critically evaluate the information provided in these responses, recognizing that some of it may be biased or incorrect. Your response should not simply replicate the given answers but should offer a refined, accurate, and comprehensive reply to the instruction. Ensure your response is well-structured, coherent, and adheres to the highest standards of accuracy and reliability.

Responses from models:"""
layers = 3

def getFinalSystemPrompt(system_prompt, results):
    """Construct a system prompt for layers 2+ that includes the previous responses to synthesize."""
    return (
        system_prompt
        + "\n"
        + "\n".join([f"{i+1}. {str(element)}" for i, element in enumerate(results)])
    )

async def run_llm(model, prev_response=None):
    """Run a single LLM call with a model while accounting for previous responses + rate limits."""
    for sleep_time in [1, 2, 4]:
        try:
            messages = (
                [
                    {
                        "role": "system",
                        "content": getFinalSystemPrompt(
                            aggreagator_system_prompt, prev_response
                        ),
                    },
                    {"role": "user", "content": user_prompt},
                ]
                if prev_response
                else [{"role": "user", "content": user_prompt}]
            )
            response = await async_client.chat.completions.create(
                model=model,
                messages=messages,
                temperature=0.7,
                max_tokens=512,
            )
            print("Model: ", model)
            break
        except together.error.RateLimitError as e:
            print(e)
            await asyncio.sleep(sleep_time)
    return response.choices[0].message.content

async def main():
    """Run the main loop of the MOA process."""
    results = await asyncio.gather(*[run_llm(model) for model in reference_models])

    for _ in range(1, layers - 1):
        results = await asyncio.gather(
            *[run_llm(model, prev_response=results) for model in reference_models]
        )

    finalStream = client.chat.completions.create(
        model=aggregator_model,
        messages=[
            {
                "role": "system",
                "content": getFinalSystemPrompt(aggreagator_system_prompt, results),
            },
            {"role": "user", "content": user_prompt},
        ],
        stream=True,
    )
    for chunk in finalStream:
        print(chunk.choices[0].delta.content or "", end="", flush=True)

asyncio.run(main())
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mRuntimeError[0m                              Traceback (most recent call last)
Cell [1;32mIn[3], line 84[0m
[0;32m     81[0m     [38;5;28;01mfor[39;00m chunk [38;5;129;01min[39;00m finalStream:
[0;32m     82[0m         [38;5;28mprint[39m(chunk[38;5;241m.[39mchoices[[38;5;241m0[39m][38;5;241m.[39mdelta[38;5;241m.[39mcontent [38;5;129;01mor[39;00m [38;5;124m"[39m[38;5;124m"[39m, end[38;5;241m=[39m[38;5;124m"[39m[38;5;124m"[39m, flush[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[1;32m---> 84[0m [43masyncio[49m[38;5;241;43m.[39;49m[43mrun[49m[43m([49m[43mmain[49m[43m([49m[43m)[49m[43m)[49m

File [1;32mC:\ProgramData\anaconda3\envs\mlpy\lib\asyncio\runners.py:33[0m, in [0;36mrun[1;34m(main, debug)[0m
[0;32m      9[0m [38;5;250m[39m[38;5;124;03m"""Execute the coroutine and return the result.[39;00m
[0;32m     10[0m 
[0;32m     11[0m [38;5;124;03mThis function runs the passed coroutine, taking care of[39;00m
[1;32m   (...)[0m
[0;32m     30[0m [38;5;124;03m    asyncio.run(main())[39;00m
[0;32m     31[0m [38;5;124;03m"""[39;00m
[0;32m     32[0m [38;5;28;01mif[39;00m events[38;5;241m.[39m_get_running_loop() [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m---> 33[0m     [38;5;28;01mraise[39;00m [38;5;167;01mRuntimeError[39;00m(
[0;32m     34[0m         [38;5;124m"[39m[38;5;124masyncio.run() cannot be called from a running event loop[39m[38;5;124m"[39m)
[0;32m     36[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m coroutines[38;5;241m.[39miscoroutine(main):
[0;32m     37[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([38;5;124m"[39m[38;5;124ma coroutine was expected, got [39m[38;5;132;01m{!r}[39;00m[38;5;124m"[39m[38;5;241m.[39mformat(main))

[1;31mRuntimeError[0m: asyncio.run() cannot be called from a running event loop

